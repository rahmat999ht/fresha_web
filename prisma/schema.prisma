// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    product       Product[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model HastagMl {
    id         String    @id @default(cuid())
    name       String
    custamerId String
    Custamer   Custamer? @relation(fields: [custamerId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Custamer {
    id            String     @id @default(cuid())
    name          String?
    image         String?
    email         String?    @unique
    emailVerified DateTime?
    phone         String?
    address       String?
    isActive      Boolean?
    riwPes        Order[]
    riwHastag     HastagMl[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id     String @id @default(cuid())
    // payment     String
    status String
    totBuy Int
    // amount   Int

    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    orderBy     Custamer          @relation(fields: [orderById], references: [id], onDelete: Cascade)
    orderById   String
    listProduct ProductsOnOrder[]
}

model Product {
    id        String @id @default(cuid())
    image     String
    name      String
    hastag_ml String
    category  String
    desc      String
    price     Int
    stock     Int

    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    createdBy   User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    listOrder   ProductsOnOrder[]

    @@index([name])
}

model ProductsOnOrder {
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    quantity  Int     @default(1)
    totPrice  Int

    @@id([productId, orderId])
}

// model OrderProduct {
//     id        String  @id @default(cuid())
//     productId String
//     product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//     orderId   String
//     order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
// }
